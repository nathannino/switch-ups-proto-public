[gd_scene load_steps=3 format=3 uid="uid://cdg20pv0w45x1"]

[ext_resource type="Script" path="res://globals/utility_scenes/viewport_min_size.gd" id="1_pv03i"]

[sub_resource type="GDScript" id="GDScript_ft3pa"]
script/source = "extends Control

@export var target_size : Vector2i

func reparent_but_good(child : Node, root : Node) :
	if not child.get_parent() == self : return # Already handled
	child.owner = null
	remove_child(child)
	root.add_child(child)
	child.owner = self
	

var has_called = false

func _enter_tree() -> void:
	$SubViewportContainer/SizePreservingSubViewport.target_size = target_size

func move_scene_child_to_viewport() :
	var container = get_node_or_null(\"SubViewportContainer\")
	var child_root = get_node_or_null(\"SubViewportContainer/SizePreservingSubViewport\")
	has_called = false
	
	if container == null or child_root == null :
		return # We should be getting another notification anyways lol
	
	for child in get_children() :
		# print(\"name : %s , parent : %s , owner : %s\" % [child.name, child.get_parent().name, child.owner])
		if child == container : continue
		reparent_but_good(child,child_root)

func _notification(what: int) -> void:
	match what :
		NOTIFICATION_CHILD_ORDER_CHANGED : # This allows us to handle it before entering the scene tree
			if not has_called :
				has_called = true # And this prevents spamming the function for every single node. Note that the amount of nodes that will be handled for one call does depend on how many the engine can instantiate before the end of the frame... but at least they will only be in the loop once before being reparented
				move_scene_child_to_viewport.call_deferred()
"

[node name="SizePreservingSubViewportContainer" type="Control"]
editor_description = "A viewport container that will make it's children the same size as"
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_ft3pa")
target_size = Vector2i(1920, 1080)

[node name="SubViewportContainer" type="SubViewportContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
stretch = true

[node name="SizePreservingSubViewport" type="SubViewport" parent="SubViewportContainer"]
editor_description = "The name is a reference to \"DrawSizePreservingFillContainer\" from osu!framework, which doesn't do the same thing, but that I am using for the same purpose as the time I used osu!framework for a school project (veille)"
handle_input_locally = false
size = Vector2i(1920, 1080)
size_2d_override_stretch = true
render_target_update_mode = 4
script = ExtResource("1_pv03i")
